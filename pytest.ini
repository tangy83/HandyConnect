[tool:pytest]
# Test discovery
testpaths = tests
python_files = test_*.py
python_classes = Test*
python_functions = test_*

# Test execution options
addopts = 
    -v
    --tb=short
    --strict-markers
    --disable-warnings
    --cov=.
    --cov-report=html:htmlcov
    --cov-report=term-missing
    --cov-report=xml:coverage.xml
    --cov-exclude=tests/*
    --cov-exclude=venv/*
    --cov-exclude=env/*
    --cov-exclude=__pycache__/*
    --cov-exclude=*.pyc
    --cov-fail-under=80
    --maxfail=10
    --durations=10

# Test markers
markers =
    unit: Unit tests - fast, isolated tests for individual components
    integration: Integration tests - tests for component interactions
    e2e: End-to-end tests - complete user workflow tests
    slow: Slow running tests - tests that take longer to execute
    analytics: Analytics related tests
    performance: Performance related tests
    email: Email service tests
    llm: LLM service tests
    api: API endpoint tests
    database: Database related tests
    security: Security related tests
    ui: User interface tests
    smoke: Smoke tests - basic functionality tests
    regression: Regression tests - tests for bug fixes
    acceptance: Acceptance tests - business requirement tests

# Test configuration
minversion = 6.0
timeout = 300
timeout_method = thread

# Logging configuration
log_cli = true
log_cli_level = INFO
log_cli_format = %(asctime)s [%(levelname)8s] %(name)s: %(message)s
log_cli_date_format = %Y-%m-%d %H:%M:%S

log_file = logs/pytest.log
log_file_level = DEBUG
log_file_format = %(asctime)s [%(levelname)8s] %(filename)s:%(lineno)d %(funcName)s(): %(message)s
log_file_date_format = %Y-%m-%d %H:%M:%S

# Filter warnings
filterwarnings =
    ignore::DeprecationWarning
    ignore::PendingDeprecationWarning
    ignore::UserWarning:requests.*
    ignore::UserWarning:urllib3.*

# Test collection
collect_ignore = 
    setup.py
    conftest.py

# Coverage configuration
[coverage:run]
source = .
omit = 
    tests/*
    venv/*
    env/*
    __pycache__/*
    *.pyc
    setup.py
    conftest.py
    */migrations/*
    */venv/*
    */env/*

[coverage:report]
exclude_lines =
    pragma: no cover
    def __repr__
    if self.debug:
    if settings.DEBUG
    raise AssertionError
    raise NotImplementedError
    if 0:
    if __name__ == .__main__.:
    class .*\bProtocol\):
    @(abc\.)?abstractmethod

[coverage:html]
directory = htmlcov
title = HandyConnect Coverage Report

[coverage:xml]
output = coverage.xml


